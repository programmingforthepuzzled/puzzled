{"version":3,"sources":["../../node_modules/regenerator-runtime/runtime.js","ui/alerts.ts","ui/message-view.js","puzzles/base-puzzle-setup.ts","puzzles/crossing-puzzles/common-setup.ts","puzzles/crossing-puzzles/bridge-setup.ts","puzzles/base-animator.ts","puzzles/crossing-puzzles/common-animator.ts","puzzles/crossing-puzzles/bridge-animator.ts","puzzles/crossing-puzzles/river-setup.ts","puzzles/crossing-puzzles/river-animator.ts","puzzles/puzzle-manager.ts","ui/modal-controller.js","main.js"],"names":["MessageVueManager","Vue","type","clearMessages","messages","splice","length","addMessage","message","push","text","exports","initModal","data","active","history","back","editor","ace","edit","setTheme","session","setMode","setShowPrintMargin","getSession","setUseWrapMode","setFontSize","runButtonID","runButtonVueManager","runUserCode","startRunning","runningCode","getAnnotations","annotation","stopRunning","currentPuzzle","setupCode","Function","Object","keys","__environment__","getValue","values","endCode","puzzles","Map","set","goatCabbageWolf","vampirePriest","soldierBoy","agentActor","ghoul","get","sessionStorage","getItem","modalController","require","tutorialData","runButton","document","getElementById","style","height","clientHeight","setValue","initialCode"],"mappings":"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","file":"main.map","sourceRoot":"../src/scripts","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","export const codeErrorAlert = function() {\n    alert(\"Your code has errors. Fix them before continuing.\"); \n}\n","let MessageVueManager = new Vue({\n    el:\"#vue-app-message-display\",\n    data: {\n        messages: []\n    },\n    methods: {\n        typeToClass: function(type) {\n            return \"has-text-\" + type \n        }\n    }\n})\n\nexport const clearMessages = function() {\n    MessageVueManager.messages.splice(0, MessageVueManager.messages.length)\n}\n\nexport const addMessage = function(message, type='danger') {\n    MessageVueManager.messages.push({text: message, type: type})\n}\n\n\n","function deepClone(obj: object): Object {\n    return JSON.parse(JSON.stringify(obj))\n}\n\nexport abstract class Puzzle {\n\n    addState(status: Status, data?: Object) {\n\n        if (data === undefined) {\n            data = this.stateData\n        }\n\n        this.states.push(new State(deepClone(data), status))\n    }\n\n    abstract get stateData(): Object\n\n    protected constructor(public readonly states: State[], initialStateData: Object) {\n        this.addState(GenericStatus.NoError, initialStateData)\n    }\n\n}\n\nexport class State {\n\n    constructor(public readonly data: Object, public readonly status: Status) { }\n\n}\n\nexport class Status {\n    constructor(public readonly event: GenericEvent | string, public readonly severityLevel: SeverityLevel) { }\n}\n\n// https://basarat.gitbooks.io/typescript/docs/styleguide/styleguide.html#enum\nexport const enum GenericEvent {\n    Success = 'success',\n    None = ''\n}\n\nexport const enum SeverityLevel {\n\n    NoError = 'no_error',\n    NonFatalError = 'non_fatal_error',\n    FatalError = 'fatal_error'\n\n}\n\nexport const GenericStatus = {\n    NoError: new Status(GenericEvent.None, SeverityLevel.NoError),\n    Success: new Status(GenericEvent.Success, SeverityLevel.NoError)\n}\n\n","export enum Side {\n    Left = 'left',\n    Right = 'right'\n}\n\nexport interface Crosser {\n    side: Side\n}\n\n//The syntax for calling this can be made better using an interface\nexport const checkSuccess = function (crossers: ReadonlyArray<Crosser>): boolean {\n\n    //find returns undefined if there are no matches (no crossers on the left side)\n    //! converts undefined to true\n    return !crossers.find(crosser => crosser.side === Side.Left)\n}\n\nexport const crossersOnCorrectSide = function <T extends Crosser>(crossers: T[], correctSide: Side): T | undefined {\n    let result = crossers.find(crosser => { return crosser.side !== correctSide })\n\n    if (result !== undefined) {\n        return result\n    }\n\n    return undefined\n}\n\nexport const switchSides = function (crossers: Crosser[]): void {\n\n    let moveDirection: Side;\n\n    /*\n    This code has the implicit assumption that:\n        1] There is at least 1 moving passenger\n        2] All moving passengers are on the same side\n    */\n\n    if (crossers[0].side === Side.Left) {\n        moveDirection = Side.Right\n    } else {\n        moveDirection = Side.Left\n    }\n\n    crossers.map(crosser => crosser.side = moveDirection)\n\n}","/*\nPotential TODO - create a sub folders called 'bridge puzzles' and 'river puzzles' and put this under 'bridge puzzles'\nCommon classes can be extracted into the 'crossing-puzzles', which contains 'bridge puzzles' and 'river puzzles'\n*/\n/*\nThis is a barebones implementation of the ghoul puzzle.\nIf similar puzzles are implemented in the future, then this framework can be fleshed out.\n*/\n\nimport { Puzzle, State, Status, GenericStatus, SeverityLevel } from '../base-puzzle-setup'\nimport { Side, Crosser, crossersOnCorrectSide, switchSides, checkSuccess } from './common-setup'\n\n\nclass GhoulPuzzle extends Puzzle {\n\n    get stateData(): GhoulStateData {\n        return new GhoulStateData(this.adventurers, this.timePassed, this.currentSide)\n    }\n\n    public get outOfTime(): boolean {\n\n        if (puzzle.timePassed > puzzle.timeLimit) {\n            return true\n        }\n\n        return false\n    }\n\n    constructor(public readonly adventurers: Adventurer[], public timePassed = 0, public readonly timeLimit = 17, public currentSide = Side.Left, public readonly states: GhoulState[] = []) {\n        super(states, new GhoulStateData(adventurers, timePassed, null))\n    }\n\n}\n\nexport class GhoulState extends State {\n\n    constructor(public readonly data: GhoulStateData, public readonly status: Status) {\n        super(data, status)\n    }\n\n}\n\nclass GhoulStateData {\n\n    constructor(public readonly adventurers: Adventurer[], public readonly timePassed: number, public readonly moveDirection: Side | null) { }\n\n}\n\nclass Adventurer implements Crosser {\n    constructor(public readonly name: string, public readonly timeToCross: number, public side = Side.Left, public hasTorch: boolean = false) { }\n}\n\nexport const GhoulStatus = {\n    SuccessStatus: new Status('Success - Everyone crossed the bridge.', SeverityLevel.NoError)\n}\n\n\nexport const crossBridge = function (...adventurers: Adventurer[]) {\n\n    if (puzzle.outOfTime) {\n        return\n    }\n\n    let preCrossingStatus = preCrossingErrors(adventurers)\n    if (preCrossingStatus !== null) {\n        puzzle.addState(preCrossingStatus)\n        return\n    }\n\n    switchSides(adventurers)\n\n    puzzle.currentSide = adventurers[0].side\n\n    puzzle.timePassed += Math.max(...adventurers.map(adventurer => adventurer.timeToCross))\n\n    if (puzzle.outOfTime) {\n        puzzle.addState(new Status('Time limit exceeded', SeverityLevel.FatalError))\n    } else if (checkSuccess(puzzle.adventurers)) {\n        puzzle.addState(GhoulStatus.SuccessStatus)\n    } else {\n        puzzle.addState(GenericStatus.NoError)\n    }\n}\n\nexport const giveTorch = function (adventurer: Adventurer) {\n\n    if (puzzle.outOfTime) {\n        return\n    }\n\n    if (adventurer.hasTorch === true) {\n        puzzle.addState(new Status(adventurer.name + ' already has the torch', SeverityLevel.NonFatalError))\n    } else {\n        let [curTorchSide] = puzzle.adventurers.filter(adventurer => adventurer.hasTorch === true).map(adventurer => adventurer.side)\n        let proposedTorchSide = adventurer.side\n\n        if (curTorchSide !== proposedTorchSide) {\n            puzzle.addState(new Status('The torch can only be transferred to adventurers on the same side', SeverityLevel.NonFatalError))\n            return\n        }\n\n        puzzle.adventurers.map(adventurer => adventurer.hasTorch = false)\n        adventurer.hasTorch = true\n        puzzle.addState(GenericStatus.NoError)\n    }\n}\n\nfunction preCrossingErrors(adventurers: Adventurer[]): Status | null {\n    let misplacedCharacter = crossersOnCorrectSide(adventurers, puzzle.currentSide)\n\n    if (misplacedCharacter !== undefined) {\n        return new Status(misplacedCharacter.name + ' not on correct side', SeverityLevel.NonFatalError)\n    }\n\n    if (adventurers.length > 2) {\n        return new Status('only a max of 2 adventurers can cross the bridge at once', SeverityLevel.NonFatalError)\n    }\n\n    if (adventurers.length === 0) {\n        return new Status('an adventurer is needed to cross the bridge', SeverityLevel.NonFatalError)\n    }\n\n    if (!adventurers.find(adventurer => adventurer.hasTorch)) {\n        return new Status('at least 1 adventurer must have a torch to cross the bridge', SeverityLevel.NonFatalError)\n    }\n\n    return null\n}\n\nexport const initGhoulPuzzle = function (): Adventurer[] {\n\n\n    let Alice = new Adventurer('Alice', 1, Side.Left, true)\n    let Bob = new Adventurer('Bob', 2)\n    let Charlie = new Adventurer('Charlie', 5)\n    let Doris = new Adventurer('Doris', 10)\n\n    let adventurers = [Alice, Bob, Charlie, Doris]\n\n    puzzle = new GhoulPuzzle(adventurers)\n    states = puzzle.states\n\n    return adventurers\n}\n\nlet puzzle: GhoulPuzzle;\nexport var states: GhoulState[]\n\n\n","//This may get changed to an abstract class if the the draw object is common amongst all animators\nexport interface Animator {\n\n    animate(): Promise<void>\n\n}\n\nexport const createDraw = function (): svgjs.Doc {\n    let id = 'animation-container'\n    let animationContainer = document.getElementById(id)\n    animationContainer!.style.background = \"\"\n    while (animationContainer!.firstChild) {\n        animationContainer!.removeChild(animationContainer!.firstChild!)\n    }\n    //@ts-ignore\n    return SVG(id)\n}","import { Crosser, Side } from './common-setup'\n\nexport const sortIntoLeftAndRightSides = function (crossers: ReadonlyArray<Crosser>): ReadonlyArray<ReadonlyArray<number>> {\n\n    function sortIntoSide(crossers: ReadonlyArray<Crosser>, side: Side): number[] {\n        return crossers.filter(crosser => crosser.side == side).map(crosser => crossers.indexOf(crosser))\n    }\n\n    return [sortIntoSide(crossers, Side.Left), sortIntoSide(crossers, Side.Right)]\n\n}\n\nexport const getMovingCrossers = function (currentCrossers: ReadonlyArray<Crosser>, prevCrossers: ReadonlyArray<Crosser>): ReadonlyArray<number> {\n\n    return currentCrossers.filter(crosser => crosser.side !== prevCrossers[currentCrossers.indexOf(crosser)].side).map(crosser => currentCrossers.indexOf(crosser))\n\n}\n\nexport const getBaseDimensions = function (draw: svgjs.Doc): number[] {\n    let boundingRect = draw.native().getBoundingClientRect()\n    return [boundingRect.width, boundingRect.height]\n}\n\nexport const getCenterY = function (imageHeight: number, totalHeight: number) {\n    return totalHeight / 2 - (imageHeight / 2)\n}\n\nexport async function sleep(milliseconds: number) {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n}","import { Animator, createDraw } from \"../base-animator\";\nimport { getBaseDimensions, sleep, sortIntoLeftAndRightSides, getMovingCrossers } from \"./common-animator\";\nimport { Side } from './common-setup'\nimport { SeverityLevel } from '../base-puzzle-setup'\nimport { states, GhoulState, GhoulStatus } from './bridge-setup'\n\nexport class BridgeAnimator implements Animator {\n\n\tprivate readonly characterSideLength: number\n\tprivate drawings = new Map<number, svgjs.Image>();\n\tprivate readonly fileExtension = '.svg'\n\n\tprivate readonly baseWidth: number;\n\tprivate readonly baseHeight: number;\n\n\tprivate readonly numCharsOnSide = 4;\n\tprivate readonly sideWidth: number;\n\n\tprivate readonly bridgeHeightToWidthRatio = 140 / 512;\n\tprivate readonly bridgeHeight: number;\n\tprivate readonly bridgeYCoord: number;\n\tprivate timePassedText: svgjs.Text;\n\n\tprivate torch: svgjs.Image;\n\tprivate readonly torchHeight: number;\n\n\n\tconstructor(private readonly addMessage: (message: string, type?: string) => void, private readonly specificDir: string, private readonly draw: svgjs.Doc = createDraw()) {\n\t\tthis.draw.clear();\n\n\t\t[this.baseWidth, this.baseHeight] = getBaseDimensions(this.draw)\n\t\tthis.characterSideLength = this.baseWidth / 16\n\t\tthis.sideWidth = this.characterSideLength * this.numCharsOnSide;\n\t\tthis.bridgeHeight = (this.baseWidth - (2 * this.sideWidth)) * this.bridgeHeightToWidthRatio\n\t\tthis.bridgeYCoord = this.baseHeight - this.bridgeHeight\n\t\tthis.timePassedText = this.draw.text(\"Time passed: \" + 0)\n\t\tthis.timePassedText.font({\n\t\t\tfamily: 'Helvetica',\n\t\t\tsize: 30\n\t\t});\n\t\tthis.torchHeight = this.characterSideLength\n\t\tthis.torch = this.createTorch()\n\t}\n\n\tprivate createTorch(): svgjs.Image {\n\t\treturn this.draw.image(this.specificDir + 'torch' + this.fileExtension).size(this.characterSideLength / 2, this.characterSideLength)\n\t}\n\n\tasync animate(): Promise<void> {\n\n\t\tthis.setupBackground()\n\n\t\tfor (let i = 0; i < states[0].data.adventurers.length; i++) {\n\t\t\tlet currentAdventurer = states[0].data.adventurers[i];\n\t\t\tthis.drawings.set(i, this.draw.image(this.specificDir + currentAdventurer.name + this.fileExtension).size(this.characterSideLength, this.characterSideLength))\n\t\t}\n\n\t\tfor (let state of states) {\n\t\t\tawait this.drawFrame(state);\n\n\t\t\t//0.5 second delay before each frame\n\t\t\tawait sleep(500)\n\t\t}\n\t}\n\n\tprivate async drawFrame(state: GhoulState): Promise<void> {\n\n\t\t//the index of the current state\n\t\tlet i = states.indexOf(state);\n\n\n\t\tlet [leftBankIDs, rightBankIDs] = sortIntoLeftAndRightSides(state.data.adventurers)\n\n\t\tif (i === 0) {\n\t\t\tthis.drawBridgeSide(Side.Left, leftBankIDs);\n\t\t\tthis.drawBridgeSide(Side.Right, rightBankIDs)\n\t\t} else {\n\n\t\t\tlet showSuccess = false;\n\t\t\tlet throwFatalError = false;\n\n\t\t\tif (state.status === GhoulStatus.SuccessStatus) {\n\t\t\t\tshowSuccess = true\n\t\t\t} else if (state.status.severityLevel === SeverityLevel.FatalError) {\n\t\t\t\tthrowFatalError = true\n\t\t\t} else if (state.status.severityLevel === SeverityLevel.NonFatalError) {\n\t\t\t\tthis.addMessage('Warning: ' + state.status.event, 'warning')\n\t\t\t}\n\n\t\t\t//Get move direction\n\t\t\tlet moveDirection = state.data.moveDirection\n\n\t\t\tif (moveDirection === Side.Left) {\n\t\t\t\tthis.drawBridgeSide(Side.Right, rightBankIDs)\n\t\t\t} else {\n\t\t\t\tthis.drawBridgeSide(Side.Left, leftBankIDs)\n\t\t\t}\n\n\t\t\tlet prevState = states[i - 1]\n\n\t\t\tlet movingPassengerIDs: ReadonlyArray<number> = getMovingCrossers(state.data.adventurers, prevState.data.adventurers)\n\n\t\t\tawait this.animateCrossing(movingPassengerIDs, moveDirection, state);\n\n\t\t\tif (moveDirection === Side.Left) {\n\t\t\t\tthis.drawBridgeSide(Side.Left, leftBankIDs)\n\t\t\t} else {\n\t\t\t\tthis.drawBridgeSide(Side.Right, rightBankIDs)\n\t\t\t}\n\n\t\t\tif (throwFatalError) {\n\t\t\t\tthis.displayFatalError(state.status.event)\n\t\t\t} else if (showSuccess) {\n\t\t\t\tthis.addMessage(state.status.event, 'success')\n\t\t\t}\n\t\t}\n\n\t\tthis.updateTimePassed(state.data.timePassed)\n\t\tthis.updateTorch(state)\n\n\t}\n\n\tprivate displayFatalError(message: string) {\n\n\t\tlet ghostSideLen = this.characterSideLength * 3;\n\t\tthis.draw.image(this.specificDir + 'ghost' + this.fileExtension).size(ghostSideLen, ghostSideLen).move(this.baseWidth / 2 - ghostSideLen / 2, this.bridgeYCoord - ghostSideLen - ghostSideLen / 2);\n\n\t\tthis.addMessage(\"Error: \" + message)\n\t}\n\n\tprivate updateTimePassed(timePassed: number) {\n\t\tthis.timePassedText.text(\"Time Passed: \" + timePassed)\n\t}\n\n\tprivate updateTorch(state: GhoulState) {\n\n\t\tlet [adventurerName] = state.data.adventurers.filter(adventurer => adventurer.hasTorch).map(adventurer => adventurer.name)\n\t\tlet [adventurerID] = state.data.adventurers.filter(adventurer => adventurer.name === adventurerName).map(adventurer => state.data.adventurers.indexOf(adventurer))\n\n\t\tlet image = this.drawings.get(adventurerID)\n\t\tthis.moveTorch(image!)\n\t}\n\n\tprivate moveTorch(image: svgjs.Image) {\n\t\tthis.torch.move(image.x() + this.characterSideLength / 4, this.bridgeYCoord - this.characterSideLength - this.torchHeight)\n\t}\n\n\tprivate async animateCrossing(IDs: ReadonlyArray<number>, moveDirection: Side | null, state: GhoulState) {\n\t\tconst animationTime = 1200;\n\n\t\tif (moveDirection === null) {\n\t\t\tthrow \"Internal Error - moveDirection cannot be null. Report this to the developer.\"\n\t\t}\n\n\t\tif (IDs.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tlet movingChars = this.draw.group()\n\n\t\tlet increment = this.characterSideLength\n\t\tlet startXCoord = this.sideWidth\n\t\tlet endXCoord = this.baseWidth - this.sideWidth\n\n\t\tif (moveDirection === Side.Left) {\n\t\t\tincrement *= -1\n\t\t\tstartXCoord = this.baseWidth - this.sideWidth\n\t\t\tendXCoord = this.sideWidth\n\t\t}\n\n\t\tlet xCoord = startXCoord\n\t\tlet xShift = endXCoord - startXCoord\n\n\t\tfor (const id of IDs) {\n\t\t\tlet currentDrawing = this.drawings.get(id);\n\t\t\tcurrentDrawing!.move(xCoord, this.bridgeYCoord - this.characterSideLength);\n\t\t\tmovingChars.add(currentDrawing!);\n\t\t\tif (state.data.adventurers[id].hasTorch) {\n\t\t\t\tthis.moveTorch(currentDrawing!)\n\t\t\t\tmovingChars.add(this.torch)\n\t\t\t}\n\t\t\txCoord += increment\n\t\t}\n\n\t\tmovingChars.animate(animationTime, '-', 0).move(xShift, 0);\n\t\tawait sleep(animationTime);\n\t\tmovingChars.remove();\n\n\t\tfor (const id of IDs) {\n\t\t\tthis.drawings.set(id, this.draw.image(this.specificDir + states[0].data.adventurers[id].name + this.fileExtension).size(this.characterSideLength, this.characterSideLength))\n\t\t}\n\n\t\tthis.torch = this.createTorch()\n\t}\n\n\tprivate drawBridgeSide(side: Side, IDs: ReadonlyArray<number>) {\n\n\t\tlet currentCoord: number;\n\t\tlet increment = this.characterSideLength;\n\n\t\tif (side === Side.Left) {\n\t\t\tcurrentCoord = 0;\n\t\t} else {\n\t\t\tcurrentCoord = this.baseWidth;\n\t\t\t//check if this works w/ pass by ref or value\n\t\t\tincrement *= -1\n\t\t\tcurrentCoord += increment\n\t\t}\n\n\t\tfor (let id of IDs) {\n\t\t\tthis.drawings.get(id)!.move(currentCoord, this.bridgeYCoord - this.characterSideLength)\n\t\t\tcurrentCoord += increment;\n\t\t}\n\t}\n\n\tprivate setupBackground() {\n\t\tlet bridgeWidth = this.baseWidth - (2 * this.sideWidth)\n\t\tthis.draw.image(this.specificDir + 'bridge' + this.fileExtension).size(bridgeWidth, this.bridgeHeight).move(this.sideWidth, this.bridgeYCoord)\n\n\t\tlet leftSide = this.draw.rect().size(this.sideWidth, this.bridgeHeight).move(0, this.bridgeYCoord).fill(\"#A9A9A9\")\n\t\tleftSide.clone().move(this.baseWidth - this.sideWidth, this.bridgeYCoord)\n\t}\n}","import { Puzzle, State, Status, GenericStatus, SeverityLevel, GenericEvent } from '../base-puzzle-setup'\nimport { Side, Crosser, checkSuccess, switchSides, crossersOnCorrectSide } from './common-setup'\n\nclass RiverPuzzle extends Puzzle {\n\n    get stateData(): RiverStateData {\n        return new RiverStateData(this.passengers, this.boat)\n    }\n\n    constructor(public readonly passengers: ReadonlyArray<Passenger>, public readonly boat: Boat, public readonly rules: RiverCrossingRule[], public fatalErrorRaised = false, public states: RiverState[] = []) {\n        super(states, new RiverStateData(passengers, boat))\n    }\n\n}\n\nexport class RiverState extends State {\n\n    constructor(public readonly data: RiverStateData, public readonly status: RiverStatus) {\n        super(data, status)\n    }\n}\n\nclass RiverStateData {\n\n    constructor(public readonly passengers: ReadonlyArray<Passenger>, public readonly boat: Boat) { }\n\n}\n\nexport class RiverErrorData {\n    constructor(public readonly oldType: string, public readonly newType: string, public readonly side: Side) { }\n}\n\nexport class RiverStatus extends Status {\n    constructor(public readonly event: GenericEvent | string, public readonly severityLevel: SeverityLevel, public readonly errorData?: RiverErrorData) {\n        super(event, severityLevel)\n    }\n}\n\nexport const RiverStatuses = {\n    SuccessStatus: new Status('Success - Everyone crossed the river.', SeverityLevel.NoError)\n}\n\nclass Boat {\n    constructor(public readonly rowerTypes: ReadonlyArray<String>, public readonly weightLimit: number, public side = Side.Left) { }\n}\n\nexport class Passenger implements Crosser {\n    constructor(public readonly type: string, public readonly weight: number, public side = Side.Left) { }\n}\n\nabstract class RiverCrossingRule {\n    abstract check(puzzle: RiverPuzzle): Status\n}\n\nclass SameSideRule extends RiverCrossingRule {\n\n    constructor(private readonly type1: string, private readonly type2: string, private readonly type3: string) {\n        super();\n    }\n\n    check(puzzle: RiverPuzzle): Status {\n\n        for (let side of Object.values(Side)) {\n\n            const isTypeOnSide = function (passenger: Passenger, side: Side, type: string): boolean {\n                return passenger.side === side && passenger.type === type;\n            };\n\n            const type1_on_side = puzzle.passengers.some(passenger => {\n                return isTypeOnSide(passenger, side, this.type1)\n            });\n\n            const type_2_on_side = puzzle.passengers.some(passenger => {\n                return isTypeOnSide(passenger, side, this.type2)\n            });\n\n            const type_3_on_side = puzzle.passengers.some(passenger => {\n                return isTypeOnSide(passenger, side, this.type3)\n            });\n\n            if (type1_on_side && type_2_on_side && !type_3_on_side) {\n                let message = this.type1 + ' and ' + this.type2 + ' are both on ' + side + ' side without ' + this.type3;\n\n                if (this.type2 === 'apple') {\n                    return new RiverStatus(message, SeverityLevel.FatalError, new RiverErrorData(this.type2, 'apple_eaten', side))\n                } else {\n                    return new RiverStatus(message, SeverityLevel.FatalError, new RiverErrorData(this.type2, 'skull', side))\n                }\n\n                /*\n                if(this.type1 == 'goat') {\n                    return new Status(message, herbivoreCode)\n                } else if (this.type1 === 'wolf') {\n                    return new Status(message, violenceCode)\n                } else {\n                    return new Status(message, unsortedCode)\n                }\n                */\n            }\n        }\n        return GenericStatus.NoError\n    }\n}\n\n\nclass RelativeAmountRule extends RiverCrossingRule {\n\n    constructor(private readonly type1: string, private readonly type2: string) {\n        super();\n    }\n\n\n    check(puzzle: RiverPuzzle): Status {\n        for (let side of Object.values(Side)) {\n            let amount_of_type1_on_side = 0;\n            let amount_of_type2_on_side = 0;\n\n            for (let passenger of puzzle.passengers) {\n                if (passenger.type === this.type1 && passenger.side === side) {\n                    amount_of_type1_on_side++\n                } else if (passenger.type === this.type2 && passenger.side === side) {\n                    amount_of_type2_on_side++\n                }\n            }\n\n            if (amount_of_type1_on_side > amount_of_type2_on_side && amount_of_type2_on_side > 0) {\n                let message = this.type1 + \"s outnumber \" + this.type2 + \"s on the \" + side + \" side\";\n\n                return new RiverStatus(message, SeverityLevel.FatalError, new RiverErrorData(this.type2, 'skull', side))\n\n                /*\n                if(this.type1 === 'vampire') {\n                    return new Status(message, violenceCode)\n                } else {\n                    return new Status(message, unsortedCode)\n                }\n                */\n            }\n        }\n        return GenericStatus.NoError\n    }\n}\n\nexport const moveBoat = function (...passengers: Array<Passenger>) {\n\n    if (puzzle.fatalErrorRaised) {\n        return\n    }\n\n    let preCrossingStatus = preCrossingErrors(passengers)\n    if (preCrossingStatus !== null) {\n        puzzle.addState(preCrossingStatus)\n        return\n    }\n\n    switchSides(passengers)\n\n    puzzle.boat.side = passengers[0].side;\n\n    for (let rule of puzzle.rules) {\n        const postCrossingStatus = rule.check(puzzle);\n        if (postCrossingStatus !== GenericStatus.NoError) {\n            puzzle.fatalErrorRaised = true\n            puzzle.addState(postCrossingStatus)\n            return\n        }\n    }\n\n    if (checkSuccess(puzzle.passengers)) {\n        puzzle.addState(RiverStatuses.SuccessStatus)\n    } else {\n        puzzle.addState(GenericStatus.NoError)\n    }\n}\n\nfunction preCrossingErrors(passengers: Passenger[]): Status | null {\n\n    let rowerOnBoat = false;\n    let totalPassengerWeight = 0;\n\n    for (let passenger of passengers) {\n        totalPassengerWeight += passenger.weight;\n        if (puzzle.boat.rowerTypes.indexOf(passenger.type) > -1) {\n            rowerOnBoat = true\n        }\n        if (passenger.side != puzzle.boat.side) {\n            //addState(puzzle, new Status(passenger.type + ' not on correct side', nonFatalCode));\n            return new Status(passenger.type + ' not on correct side', SeverityLevel.NonFatalError)\n        }\n    }\n\n    let misplacedPassenger = crossersOnCorrectSide(passengers, puzzle.boat.side)\n    if (misplacedPassenger !== undefined) {\n        return new Status(misplacedPassenger.type + ' not on correct side', SeverityLevel.NonFatalError)\n    }\n\n    if (totalPassengerWeight > puzzle.boat.weightLimit) {\n        //addState(puzzle, new Status('boat weight limit exceeded', nonFatalCode));\n        return new Status('boat weight limit exceeded', SeverityLevel.NonFatalError)\n    }\n\n    if (!rowerOnBoat) {\n        //addState(puzzle, new Status('no rower on boat', nonFatalCode));\n        return new Status('no rower on boat', SeverityLevel.NonFatalError)\n    }\n\n    return null\n}\n\nexport const initGoatPuzzle = function (): ReadonlyArray<Passenger> {\n\n    const boat = new Boat(['farmer'], 2);\n    const passengers = [new Passenger(\"goat\", 1), new Passenger(\"apple\", 1), new Passenger(\"wolf\", 1), new Passenger(\"farmer\", 1)];\n    const rules = [new SameSideRule('wolf', 'goat', 'farmer'), new SameSideRule('goat', 'apple', 'farmer')];\n    puzzle = new RiverPuzzle(passengers, boat, rules)\n    states = puzzle.states\n\n    return puzzle.passengers\n};\n\nexport const initVampirePuzzle = function (): ReadonlyArray<ReadonlyArray<Passenger>> {\n\n    const boat = new Boat([\"vampire\", \"priest\"], 2);\n\n    const passengers = [];\n    const vampires = [];\n    const priests = [];\n\n    for (let i = 0; i < 3; i++) {\n        vampires.push(new Passenger(\"vampire\", 1))\n    }\n\n    passengers.push(...vampires);\n\n    for (let i = 0; i < 3; i++) {\n        priests.push(new Passenger(\"priest\", 1))\n    }\n\n    passengers.push(...priests);\n\n    const rules = [new RelativeAmountRule(\"vampire\", \"priest\")];\n    puzzle = new RiverPuzzle(passengers, boat, rules);\n    states = puzzle.states\n\n    return [vampires, priests]\n};\n\n\nexport const initSoldierPuzzle = function (): ReadonlyArray<ReadonlyArray<Passenger>> {\n\n    const boat = new Boat([\"soldier\", \"boy\"], 3);\n\n    const passengers = [];\n    const soldiers = [];\n    const boys = [];\n\n    for (let i = 0; i < 6; i++) {\n        soldiers.push(new Passenger(\"soldier\", 2))\n    }\n\n    passengers.push(...soldiers);\n\n    for (let i = 0; i < 2; i++) {\n        boys.push(new Passenger(\"boy\", 1))\n    }\n\n    passengers.push(...boys);\n\n    const rules: RiverCrossingRule[] = [];\n    puzzle = new RiverPuzzle(passengers, boat, rules);\n    states = puzzle.states\n\n\n    return [soldiers, boys]\n\n};\n\nexport const initActorPuzzle = function (): ReadonlyArray<Passenger> {\n\n    const boat = new Boat([\"Anne\", \"Anne_Agent\", \"Bob\", \"Bob_Agent\"], 2);\n    const passengers = [new Passenger(\"Anne\", 1), new Passenger(\"Anne_Agent\", 1), new Passenger(\"Bob\", 1), new Passenger(\"Bob_Agent\", 1)];\n    const rules = [new SameSideRule('Anne', 'Bob_Agent', 'Anne_Agent'), new SameSideRule('Bob', 'Anne_Agent', 'Bob_Agent')];\n    puzzle = new RiverPuzzle(passengers, boat, rules);\n    states = puzzle.states\n\n    return puzzle.passengers\n\n};\n\nlet puzzle: RiverPuzzle;\nexport var states: RiverState[]\n//export var states = puzzle.states\n","//The code in this file isn't great because it was my first attempt at creating an animator - look to the \"bridge-animator.ts\"\n//for an example of better code\nimport { SeverityLevel } from '../base-puzzle-setup'\nimport { Animator, createDraw } from '../base-animator'\nimport { states, RiverState, RiverStatuses, Passenger, RiverErrorData } from './river-setup'\nimport { sortIntoLeftAndRightSides, getMovingCrossers, getBaseDimensions, sleep, getCenterY } from './common-animator';\nimport { Side } from './common-setup';\n\n//let states: State[]\n\n/*\n//TODO - avoid having to repeat directory for assets\nlet baseDir = './assets/river-crossing/';\nlet commonDir = 'common/';\nlet specificDir: string\n*/\n\n\nlet grassColor = \"#80FF72\";\nlet waterColor = \"#7EE8FA\";\n\n//File extension for images\nconst extension = '.svg';\n\nconst drawings = new Map<number, svgjs.Image>();\n\n//\"animation-container\" is the id of the div that contains svg\n//SVG() is a method supplied by svg.js\n//Normally SVG is undefined - but in reality, it isn't because it's supplied by an external script tag\n//@ts-ignore\n//let draw: svgjs.Doc = SVG('animation-container')\n\nlet boat: svgjs.Image\nlet boatSideLength: number\nlet boatYCoord: number\n\nlet maxCharactersInColumn = 4;\nlet maxColumns = 2;\nconst gap = 10;\nlet characterSideLength: number\nlet baseHeight: number\nlet baseWidth: number\nlet riverBankWidth: number\n\nlet leftBankXCoord: number\nlet rightBankXCoord: number\n\nlet animationTime = 1200;\n\n\n//let addMessage: (message: string, type?: string) => void\n\nexport class RiverAnimator implements Animator {\n\n\tprivate readonly baseDir = './assets/river-crossing/';\n\tprivate readonly commonDir = 'common/';\n\tprivate textPool: svgjs.Text[] = []\n\t//private readonly draw: svgjs.Doc = createDraw()\n\n\tconstructor(private readonly addMessage: (message: string, type?: string) => void, private readonly specificDir: string, private readonly draw: svgjs.Doc = createDraw()) {\n\t\t//Reset SVG - removes all child elements\n\t\tthis.draw.clear();\n\n\t\t//Reset the drawing pool\n\t\tdrawings.clear();\n\t}\n\n\tpublic async animate(): Promise<void> {\n\n\t\tthis.calculateDimensions();\n\n\t\tthis.initBackground();\n\n\t\tthis.initBoat();\n\n\t\t/*\n\t\tTODO - There's probably a better way to write this\n\t\tUse the passengers from the first state (states[0]) to initialize the drawings.\n\t\tEach passenger has a type. The type determines the filename of the drawing for the passenger.\n\t\tE.g - if passenger type is \"goat\", then the filename is \"goat.svg\" (if extension equals 'svg')\n\n\t\tNormally passengers don't have an unique ID.\n\t\tIf 2 passengers are on the same side and have the same type then they are indistinguishable\n\t\tThis code assigns each passenger a unique ID equal to its index in states[0].passengers and a drawing based on the type name\n\t\tThe ID and drawing are stored in a map.\n\t\t*/\n\n\t\t//states[0].data.passengers\n\n\t\tfor (let i = 0; i < states[0].data.passengers.length; i++) {\n\t\t\tlet currentPassenger = states[0].data.passengers[i];\n\t\t\tdrawings.set(i, this.draw.image(this.baseDir + this.specificDir + currentPassenger.type + extension).size(characterSideLength, characterSideLength))\n\t\t}\n\n\t\tfor (let state of states) {\n\t\t\tawait this.drawFrame(state);\n\n\t\t\t//0.5 second delay before each frame\n\t\t\tawait sleep(500)\n\t\t}\n\t}\n\n\tinitBoat() {\n\t\tconst boatSideLengthInCharacters = 2;\n\t\tboatSideLength = (characterSideLength * boatSideLengthInCharacters) + gap;\n\t\tboatYCoord = getCenterY(boatSideLength, baseHeight);\n\n\t\t//The boat's filename is hardcoded\n\t\t//Move the boat to the end of the left river bank\n\t\tboat = this.draw.image(this.baseDir + this.commonDir + 'raft.svg').size(boatSideLength, boatSideLength).move(leftBankXCoord + riverBankWidth, boatYCoord)\n\t}\n\n\tasync drawFrame(state: RiverState): Promise<void> {\n\n\t\t//the index of the current state\n\t\tlet i = states.indexOf(state);\n\n\t\tconst [leftBankIDs, rightBankIDs] = sortIntoLeftAndRightSides(state.data.passengers)\n\n\t\tlet showSuccess = false;\n\t\tlet throwFatalError = false;\n\n\t\tif (state.status === RiverStatuses.SuccessStatus) {\n\t\t\tshowSuccess = true\n\t\t} else if (state.status.severityLevel === SeverityLevel.FatalError) {\n\t\t\tthrowFatalError = true\n\t\t} else if (state.status.severityLevel === SeverityLevel.NonFatalError) {\n\t\t\tthis.addMessage('Warning: ' + state.status.event, 'warning')\n\t\t}\n\n\t\tlet moveDirection = state.data.boat.side;\n\n\t\t//Redraw the canvas in the direction of the movement - if the movement was from right to left ('left')\n\t\t//then redraw the right side first\n\t\tif (moveDirection === 'left') {\n\t\t\tthis.drawRiverBank(rightBankXCoord, rightBankIDs)\n\t\t} else {\n\t\t\tthis.drawRiverBank(leftBankXCoord, leftBankIDs)\n\t\t}\n\n\t\t//this.numberPuzzle()\n\n\t\tif (i !== 0) {\n\t\t\t//Get list of passengers that have moved by checking a passenger's side\n\t\t\t//in the previous state equals their side in the current state\n\t\t\tlet prevState = states[i - 1]\n\n\t\t\tlet movingPassengerIDs = getMovingCrossers(state.data.passengers, prevState.data.passengers)\n\n\t\t\tawait this.animateCrossing(movingPassengerIDs, moveDirection);\n\n\t\t}\n\n\t\tif (moveDirection === Side.Left) {\n\t\t\tthis.drawRiverBank(leftBankXCoord, leftBankIDs)\n\t\t} else {\n\t\t\tthis.drawRiverBank(rightBankXCoord, rightBankIDs)\n\t\t}\n\n\t\tthis.numberPuzzle([], undefined)\n\n\t\tif (throwFatalError) {\n\t\t\tthis.displayFatalError(state.status.event, state.status.errorData!, state.data.passengers)\n\t\t} else if (showSuccess) {\n\t\t\tthis.addMessage(state.status.event, 'success')\n\t\t}\n\n\t\t//Put numbers on faces - if necessary\n\t\t//Only draw numbers on soldier/priest puzzles\n\t\t//this.numberPuzzle()\n\t}\n\n\tnumberPuzzle(movingIDs: ReadonlyArray<number>, movingObjects: svgjs.G | undefined) {\n\n\t\tthis.textPool.map(text => text.remove())\n\t\tthis.textPool.splice(0, this.textPool.length)\n\n\n\t\tlet initState = states[0]\n\t\tif (initState.data.passengers.some(passenger => passenger.type === 'soldier')) {\n\t\t\tthis.numberPassengers('soldier', 'boy', movingIDs, movingObjects)\n\t\t} else if (initState.data.passengers.some(passenger => passenger.type === 'priest')) {\n\t\t\tthis.numberPassengers('vampire', 'priest', movingIDs, movingObjects)\n\t\t}\n\t}\n\n\tnumberPassengers(type1: string, type2: string, movingIDs: ReadonlyArray<number>, movingObjects: svgjs.G | undefined) {\n\n\t\tlet type1s = states[0].data.passengers.filter(passenger => passenger.type === type1)\n\t\tlet type2s = states[0].data.passengers.filter(passenger => passenger.type === type2)\n\n\n\t\tconst createText = (displayNum: number, drawingID: number) => {\n\n\t\t\tconst text = this.draw.text(displayNum.toString()).move(drawings.get(drawingID)!.x(), drawings.get(drawingID)!.y()).font({\n\t\t\t\tweight: '700'\n\t\t\t})\n\t\t\tthis.textPool.push(text)\n\n\t\t\tif (movingIDs.includes(drawingID)) {\n\t\t\t\tmovingObjects!.add(text)\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < type1s.length; i++) {\n\t\t\tcreateText(i, i)\n\t\t}\n\n\t\tfor (let i = 0; i < type2s.length; i++) {\n\t\t\tcreateText(i, type1s.length + i)\n\t\t}\n\t}\n\n\tdisplayFatalError(message: string, errorData: RiverErrorData, passengers: ReadonlyArray<Passenger>) {\n\n\t\t//Don't want skull in wife puzzle\n\t\tif (!states[0].data.passengers.find(passenger => [\"Bob_Wife\", \"Charlie_Wife\", \"Bob\", \"Charlie\"].includes(passenger.type))) {\n\t\t\tthis.replaceImage(errorData.oldType, errorData.newType, errorData.side, passengers)\n\t\t}\n\t\tthis.addMessage(\"Error: \" + message)\n\t}\n\n\treplaceImage(oldtype: string, newtype: string, targetSide: Side, passengers: ReadonlyArray<Passenger>) {\n\n\t\tdrawings.forEach((drawing, key) => {\n\t\t\t//@ts-ignore drawing.src undefined\n\t\t\tlet src: string = drawing.src\n\t\t\tif (src) {\n\t\t\t\tif (passengers[key].side === targetSide) {\n\t\t\t\t\tif (src.split('/').pop()!.slice(0, -extension.length) === oldtype) {\n\t\t\t\t\t\tlet oldX = drawing.x()\n\t\t\t\t\t\tlet oldY = drawing.y()\n\t\t\t\t\t\tdrawing.remove()\n\t\t\t\t\t\tif (oldtype === 'apple') {\n\t\t\t\t\t\t\t//@ts-ignore drawing.src undefined\n\t\t\t\t\t\t\tdrawing = this.draw.image(drawing.src.replace(oldtype + extension, newtype + extension)).size(characterSideLength, characterSideLength).move(oldX, oldY)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//@ts-ignore drawing.src undefined\n\t\t\t\t\t\t\tdrawing = this.draw.image(drawing.src.replace(drawing.src.split('/').slice(-2).join('/'), 'common/' + newtype + extension)).size(characterSideLength, characterSideLength).move(oldX, oldY)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tasync animateCrossing(IDs: ReadonlyArray<number>, direction: string): Promise<void> {\n\n\t\t//draw.group() allows animation of multiple images at once\n\t\tlet movingObjects = this.draw.group();\n\n\t\t//Don't redraw the boat at the end if no passengers moved\n\t\tlet refreshBoat = false;\n\t\tif (IDs.length > 0) {\n\t\t\tmovingObjects.add(boat);\n\t\t\trefreshBoat = true\n\t\t}\n\n\t\tconst yCoord = getCenterY(characterSideLength, baseHeight);\n\n\t\tif (direction === Side.Right) {\n\n\t\t\t//startXCoord is the endpoint of the left river bank\n\t\t\tconst startXCoord = leftBankXCoord + riverBankWidth;\n\t\t\tlet xCoord = startXCoord;\n\n\t\t\t//Add the drawings one by one\n\t\t\t//Each time a drawing is added, shift to the right by 1 character length + padding before adding another drawing\n\t\t\tfor (let id of IDs) {\n\t\t\t\tlet currentDrawing = drawings.get(id);\n\t\t\t\tcurrentDrawing!.move(xCoord, yCoord);\n\t\t\t\tmovingObjects.add(currentDrawing!);\n\t\t\t\txCoord += (characterSideLength + gap)\n\t\t\t}\n\n\t\t\tconst targetXCoord = rightBankXCoord - boatSideLength;\n\t\t\tconst xShift = targetXCoord - startXCoord;\n\n\t\t\tthis.numberPuzzle(IDs, movingObjects)\n\n\t\t\tmovingObjects.animate(animationTime, '-', 0).move(xShift, 0);\n\t\t\tawait sleep(animationTime);\n\n\t\t\tmovingObjects.remove();\n\n\t\t\tif (refreshBoat) {\n\t\t\t\tboat = this.draw.image(this.baseDir + this.commonDir + 'raft.svg').size(boatSideLength, boatSideLength).y(boatYCoord).x(targetXCoord)\n\t\t\t}\n\t\t} else {\n\n\t\t\tlet xCoord = rightBankXCoord - characterSideLength;\n\n\t\t\t//Add the drawings one by one\n\t\t\t//Each time a drawing is added, shift to the left before adding another drawing\n\t\t\tfor (let id of IDs) {\n\t\t\t\tlet currentDrawing = drawings.get(id);\n\t\t\t\tcurrentDrawing!.move(xCoord, yCoord);\n\t\t\t\tmovingObjects.add(currentDrawing!);\n\t\t\t\txCoord -= (characterSideLength + gap)\n\t\t\t}\n\n\t\t\t//The end point of the animation - in absolute terms.\n\t\t\t//Equals the end point of the left river bank + the length of the boat\n\t\t\tconst targetXCoord = leftBankXCoord + riverBankWidth + boatSideLength;\n\n\t\t\t//Distance between end point of animation and start point of animation\n\t\t\t//Is negative because groups only accept relative coordinates\n\t\t\tconst xShift = -(rightBankXCoord - targetXCoord);\n\n\t\t\t//Animate objects and wait until the animation is finished\n\n\t\t\tthis.numberPuzzle(IDs, movingObjects)\n\n\t\t\tmovingObjects.animate(animationTime, '-', 0).move(xShift, 0);\n\t\t\tawait sleep(animationTime);\n\n\t\t\t//remove the group and all images inside of it.\n\t\t\t//Without this it is impossible to move the images individually\n\t\t\tmovingObjects.remove();\n\n\t\t\t//Redraw the boat, if necessary.\n\t\t\tif (refreshBoat) {\n\t\t\t\tboat = this.draw.image(this.baseDir + this.commonDir + 'raft.svg').size(boatSideLength, boatSideLength).y(boatYCoord).x(leftBankXCoord + boatSideLength)\n\t\t\t}\n\t\t}\n\n\t\t//Redraw all the images inside the group.\n\t\tfor (let id of IDs) {\n\t\t\tdrawings.set(id, this.draw.image(this.baseDir + this.specificDir + states[0].data.passengers[id].type + extension).size(characterSideLength, characterSideLength))\n\t\t}\n\n\t}\n\n\n\tcalculateDimensions() {\n\n\t\t//Each character has a vertical and horizontal gap between every other character\n\t\tconst combinedVerticalGapLength = (gap * (maxCharactersInColumn - 1));\n\n\n\t\t//draw.native() returns the SVG element.\n\t\t//The simpler draw.node.clientHeight breaks on Firefox\n\t\t///draw.n\n\t\t[baseWidth, baseHeight] = getBaseDimensions(this.draw)\n\n\t\t//characterSideLength is the width and height of every character\n\t\t//because it is calculated based on the height of the SVG, the animation\n\t\t//will break if the SVG has a large height and a small width\n\t\tcharacterSideLength = Math.round((baseHeight - combinedVerticalGapLength) / maxCharactersInColumn);\n\n\n\t\tleftBankXCoord = 0;\n\n\t\t/*\n\t\tHere's an explanatory drawing for the left river bank. The right river bank is the same, except you reflect the drawing across the y-axis.\n\t\tCharacter1 gap Character3 gap (... repeat horizontally until maxColumns is reached)\n\t\tCharacter2 gap Character4 gap\n\t\t-----------------------------  = total width of a river bank\n\t\t(repeat vertically until maxCharactersInColumn is reached)\n\t\t*/\n\t\trightBankXCoord = baseWidth - (maxColumns * characterSideLength) - gap\n\t}\n\n\n\tinitBackground() {\n\n\t\triverBankWidth = (characterSideLength * maxColumns) + gap;\n\n\t\tlet leftbank = this.draw.rect(riverBankWidth, baseHeight).move(0, 0).fill(grassColor);\n\n\t\tleftbank.clone().x(rightBankXCoord);\n\n\t\t//draws the river\n\t\tthis.draw.rect(baseWidth - riverBankWidth * 2, baseHeight).move(riverBankWidth, 0).fill(waterColor);\n\n\t\t//The parent element has padding - as such a gradient on the parent element\n\t\t// is needed to give the illustion that the SVG takes up the entire space of the parent element\n\t\tlet gradientGreenLeft = riverBankWidth + parseInt(window.getComputedStyle(this.draw.node.parentElement!, null).getPropertyValue('padding-left').replace(/px/g, ''));\n\t\tlet gradientGreenRight = this.draw.node.parentElement!.offsetWidth - gradientGreenLeft;\n\n\t\tthis.draw.node.parentElement!.style.background = \"linear-gradient(to right, \"\n\t\t\t+ grassColor + \" 0%, \" + grassColor + \" \" + gradientGreenLeft + \"px, \"\n\t\t\t+ waterColor + \" \" + gradientGreenLeft + \"px, \"\n\t\t\t+ waterColor + \" \" + gradientGreenRight + \"px, \"\n\t\t\t+ grassColor + \" \" + gradientGreenRight + \"px, \" + grassColor + \" 100%)\"\n\n\t}\n\n\tdrawRiverBank(xCoord: number, IDs: ReadonlyArray<number>) {\n\n\n\t\tlet totalCharactersDrawn = 0;\n\t\tlet currentXCoord = xCoord;\n\n\t\tcolumnLoop: for (let currentColumn = 0; currentColumn < maxColumns; currentColumn++) {\n\n\t\t\tlet currentYCoord = 0;\n\n\t\t\tfor (let currentRow = 0; currentRow < maxCharactersInColumn; currentRow++) {\n\t\t\t\tif (totalCharactersDrawn === IDs.length) {\n\t\t\t\t\tbreak columnLoop;\n\t\t\t\t}\n\n\t\t\t\tdrawings.get(IDs[totalCharactersDrawn])!.move(currentXCoord, currentYCoord);\n\n\t\t\t\tcurrentYCoord += (characterSideLength + gap);\n\t\t\t\ttotalCharactersDrawn++;\n\t\t\t}\n\t\t\tcurrentXCoord += characterSideLength;\n\t\t}\n\n\t}\n\n\n}\n\n\n\n\n\n\n","import { codeErrorAlert } from '../ui/alerts'\n//@ts-ignore - no module defs for JS file\nimport * as MessageDisplay from '../ui/message-view'\n\nimport { Animator } from './base-animator'\n\n\nclass TutorialData {\n\n    //static riverCrossingBaseDir = \"./assets/river-crossing/\";\n\n    constructor(public objective: string, public images: string[], public imageCaptions: string[], public rules: string[], public code: string[], public active = true) { }\n\n}\n\nabstract class PuzzleSetup {\n\n    async endCode(runtimeError: Error) {\n\n        let animator = this.createAnimator()\n        await animator.animate()\n\n        if (runtimeError !== undefined) {\n            let lineNum: number\n\n            let extractedlineNum = /<anonymous>:(\\d+)/.exec(JSON.stringify(runtimeError, Object.getOwnPropertyNames(runtimeError)));\n\n            //@ts-ignore Error has no property lineNumber (lineNumber is a non standard FF field)\n            if (runtimeError.lineNumber !== undefined) {\n                //@ts-ignore Same as previous line\n                lineNum = runtimeError.lineNumber - 2\n            } else if (extractedlineNum !== null) {\n                lineNum = parseInt(extractedlineNum[1]) - 2\n            } else {\n                codeErrorAlert()\n            }\n\n            //@ts-ignore - ignore lineNum used before initialized (already know that)\n            if (lineNum !== undefined) {\n                MessageDisplay.addMessage(\"Exception at line \" + lineNum + \": \" + '\"' + runtimeError.message + '\"')\n            }\n        }\n\n    }\n\n    setupCode: () => void\n\n    public readonly abstract __environment__: Object\n\n    abstract createAnimator(): Animator\n\n    protected constructor(specificSetupCode: Function, public readonly tutorialData: TutorialData, public readonly initialCode: string) {\n\n        this.setupCode = () => {\n            MessageDisplay.clearMessages()\n            specificSetupCode()\n        }\n    }\n}\n\nabstract class StandardSetup extends PuzzleSetup {\n\n    abstract animatorConstructor: new (addMessage: (message: string, type?: string) => void, assetsDir: string) => Animator\n\n    createAnimator() {\n        return new this.animatorConstructor(MessageDisplay.addMessage, this.assetsDir)\n    }\n\n    constructor(public readonly assetsDir: string, specificSetupCode: Function, tutorialData: TutorialData, initialCode: string) {\n        super(specificSetupCode, tutorialData, initialCode)\n    }\n\n}\n\nimport { giveTorch, crossBridge, initGhoulPuzzle } from './crossing-puzzles/bridge-setup'\nimport { BridgeAnimator } from './crossing-puzzles/bridge-animator'\n\nclass BridgeSetup extends StandardSetup {\n    __environment__ = { giveTorch: giveTorch, crossBridge: crossBridge }\n\n    animatorConstructor = BridgeAnimator\n\n    constructor(specificSetupCode: Function, assetsDir: string, tutorialData: TutorialData, initialCode: string) {\n        super(assetsDir, specificSetupCode, tutorialData, initialCode)\n        this.tutorialData.images = this.tutorialData.images.map(image => this.assetsDir + image)\n    }\n\n}\n\nimport { initGoatPuzzle, initActorPuzzle, initSoldierPuzzle, initVampirePuzzle, moveBoat } from './crossing-puzzles/river-setup'\nimport { RiverAnimator } from './crossing-puzzles/river-animator';\n\nclass RiverSetup extends StandardSetup {\n\n    __environment__ = { moveBoat: moveBoat }\n\n    animatorConstructor = RiverAnimator\n\n    constructor(specificSetupCode: Function, assetsDir: string, tutorialData: TutorialData, initialCode: string) {\n        super(assetsDir, specificSetupCode, tutorialData, initialCode)\n        this.tutorialData.images = this.tutorialData.images.map(image => './assets/river-crossing/' + this.assetsDir + image)\n    }\n}\n\nlet goatCabbageWolfDir = \"goat-apple-wolf/\";\n\n\n\nexport const goatCabbageWolf = new RiverSetup(\n    () => {\n        let [goat, apple, wolf, farmer] = initGoatPuzzle();\n        Object.assign(goatCabbageWolf.__environment__, { goat, apple, wolf, farmer })\n    },\n    goatCabbageWolfDir,\n    new TutorialData(\"Get the wolf, goat, farmer, and apple to the right side of the river using the boat.\",\n        [\"wolf.svg\", \"goat.svg\", \"farmer.svg\", \"apple.svg\"],\n        [\"wolf\", \"goat\", \"farmer\", \"apple\"],\n        [\"The wolf cannot be left alone with the goat.\",\n            \"The goat cannot be left alone with the apple.\",\n            \"Only the farmer can row the boat.\",\n            \"The boat can hold up to 2 objects.\"],\n        [\"<strong>Function:</strong> <code>moveBoat</code><br>\\n<strong>Inputs:</strong> <code>goat</code>, <code>wolf</code>, <code>farmer</code>, <code>apple</code><br>\\n<strong>Number of Inputs:</strong> 1 to 2<br>\\n<strong>Description</strong>: Moves objects across the river on the boat.\"]),\n    \"//Moves the farmer and apple across the river\\nmoveBoat(farmer, apple)\");\n\nlet vampirePriestDir = \"vampire-priest/\";\n\nexport const vampirePriest = new RiverSetup(\n    () => {\n        let [vampires, priests] = initVampirePuzzle();\n        Object.assign(vampirePriest.__environment__, { vampires, priests })\n    },\n    vampirePriestDir,\n    new TutorialData(\"Get three priests and three vampires to the other side of the river using the boat.\", [\"priest.svg\", \"vampire.svg\"], [\"priest\", \"vampire\"], [\"The boat can hold a maximum of 2 people.\", \"The number of vampires cannot exceed the number of priests on either side of the river.\", \"Anyone can row the boat.\"],\n        [\"<strong>Function:</strong> <code>moveBoat</code><br>\\n<strong>Inputs:</strong> Objects within the arrays <code>vampires</code>, <code>priests</code><br>\\n<strong>Number of Inputs:</strong> 1 to 2<br>\\n<strong>Description:</strong> Moves vampires and priests across the river.\"]),\n    \"//Moves the first vampire and second priest across the river\\nmoveBoat(vampires[0], priests[1])\");\n\nlet soldierBoyDir = \"soldier-boy/\";\n\nexport const soldierBoy = new RiverSetup(\n    () => {\n        let [soldiers, boys] = initSoldierPuzzle()\n        Object.assign(soldierBoy.__environment__, { soldiers, boys })\n    },\n    soldierBoyDir,\n    new TutorialData(\"Get six soldiers and two boys to the other side of the river using the boat.\", [\"soldier.svg\", \"boy.svg\"], [\"soldier\", \"boy\"], [\"The boat can carry 2 boys, a soldier and a boy, but not 2 soldiers.\"],\n        [\"<strong>Function:</strong> <code>moveBoat</code><br>\\n<strong>Inputs:</strong> Objects within the arrays <code>soldiers</code>, <code>boys</code><br>\\n<strong>Number of Inputs:</strong>  1 to 2<br>\\n<strong>Description:</strong> Moves soldiers and boys across the river.\"]),\n    \"//Move the first soldier and second boy across the river\\nmoveBoat(soldiers[0], boys[1])\\n\\n//This is a for loop - it is used for repeating an action\\n//Move the first soldier across the river 3 times\\nfor(var i = 0; i < 3; i++) {\\n    moveBoat(soldiers[0])\\n}\"\n);\n\nlet agentActorDir = \"agent-actor/\";\n\nexport const agentActor = new RiverSetup(\n    () => {\n        let [Anne, Anne_Agent, Bob, Bob_Agent] = initActorPuzzle()\n        Object.assign(agentActor.__environment__, { Bob, Bob_Agent, Anne, Anne_Agent })\n    },\n    agentActorDir,\n    new TutorialData(\"Get the actors and their paranoid agents to the other side of the river using the boat.\",\n        [\"Anne.svg\", \"Anne_Agent.svg\", \"Bob.svg\", \"Bob_Agent.svg\"],\n        [\"Anne\", \"Anne_Agent\", \"Bob\", \"Bob_Agent\"],\n        [\"The boat can hold up to 2 people.\",\n            \"No actor can be in the presence of another agent unless their own agent is also present, because each agent is worried their rival will poach their client\",\n            \"Anyone can row the boat.\"],\n        [\"<strong>Function:</strong> <code>moveBoat</code><br>\\n<strong>Inputs:</strong> <code>Anne</code>,<code>Anne_Agent</code>,<code>Bob</code>,<code>Bob_Agent</code><br>\\n<strong>Number of Inputs:</strong>  1 to 2<br>\\n<strong>Description:</strong> Moves agents and actors across the river.\"]),\n    \"//Moves Anne and her agent across the river\\nmoveBoat(Anne, Anne_Agent)\")\n\nlet ghoulDir = \"./assets/bridge-crossing/ghoul-adventurer/\";\n\nexport const ghoul = new BridgeSetup(\n    () => {\n        let [Alice, Bob, Charlie, Doris] = initGhoulPuzzle()\n        Object.assign(ghoul.__environment__, { Alice, Bob, Charlie, Doris })\n    },\n    ghoulDir,\n    new TutorialData(\"Get all four adventurers to the other side of the bridge.\",\n        [\"Alice.svg\", \"Bob.svg\", \"Charlie.svg\", \"Doris.svg\"],\n        [\"Alice\", \"Bob\", \"Charlie\", \"Doris\"],\n        [\"Alice, Bob, Charlie, and Doris can cross the bridge in 1, 2, 5, and 10 minutes respectively\", \"All 4 adventurers must cross the bridge in 17 minutes or less, otherwise a ghoul appears\", \"The bridge can only bear the weight of 2 people at a time\", \"Crossing the bridge is impossible without the torch\"],\n        [\"<strong>Function:</strong> <code>crossBridge</code><br>\\n<strong>Inputs:</strong> <code>Alice</code>, <code>Bob</code>, <code>Charlie</code>, <code>Doris</code><br>\\n<strong>Number of Inputs:</strong> 1 to 2<br>\\n<strong>Description</strong>: Moves adventurers across the bridge.\", \"<strong>Function:</strong> <code>giveTorch</code><br>\\n<strong>Inputs:</strong> <code>Alice</code>, <code>Bob</code>, <code>Charlie</code>, <code>Doris</code><br>\\n<strong>Number of Inputs:</strong> 1<br>\\n<strong>Description</strong>: Gives the torch to an adventurer.\"]),\n    \"//Moves Alice and Doris across the Bridge\\ncrossBridge(Alice, Doris)\\n//Gives torch to Doris\\ngiveTorch(Doris)\"\n)\n\n","exports.initModal = function(data) {\n    new Vue({\n        el:\"#vue-app-modal\",\n        data: data,\n        methods: {\n            continueToPuzzle: function() {\n                this.active = false\n            },\n\n            returnToMenu: function() {\n                window.history.back()\n            }\n        }\n    })\n};\n\n\n\n","//Required for support of async/await on older browsers\nimport 'regenerator-runtime/runtime'\nimport { codeErrorAlert } from './ui/alerts'\n\n//Setup Ace Editor\nlet editor = ace.edit('editor');\neditor.setTheme(\"ace/theme/monokai\");\neditor.session.setMode(\"ace/mode/javascript\");\neditor.setShowPrintMargin(false);\neditor.getSession().setUseWrapMode(true);\neditor.setFontSize(20)\n\nconst runButtonID = \"vue-run-button\"\nlet runButtonVueManager = new Vue({\n    el: \"#\" + runButtonID,\n    data: {\n        runningCode: false,\n        text: \"Run\"\n    },\n    methods: {\n        runUserCode: async function () {\n            this.startRunning()\n            this.runningCode = true\n\n            for (let annotation of editor.getSession().getAnnotations()) {\n                if (annotation.type === 'warning' || annotation.type === 'error') {\n                    codeErrorAlert()\n                    this.stopRunning()\n                    return;\n                }\n            }\n\n            currentPuzzle.setupCode();\n\n            try {\n                (new Function(...Object.keys(currentPuzzle.__environment__), editor.getValue())(...Object.values(currentPuzzle.__environment__)));\n\n                await currentPuzzle.endCode()\n            } catch (error) {\n                await currentPuzzle.endCode(error)\n            }\n\n            this.stopRunning()\n        },\n        startRunning: function () {\n            this.text = \" \"\n            this.runningCode = true\n        },\n        stopRunning: function () {\n            this.runningCode = false\n            this.text = \"Run\"\n        }\n    }\n})\n\nimport { goatCabbageWolf, vampirePriest, soldierBoy, agentActor, ghoul } from \"./puzzles/puzzle-manager\";\n\nlet puzzles = new Map();\npuzzles.set(\"Wolves and Goats\", goatCabbageWolf);\npuzzles.set(\"Priests and Vampires\", vampirePriest);\npuzzles.set(\"Soldiers and Boys\", soldierBoy);\npuzzles.set(\"Actors and Agents\", agentActor);\npuzzles.set(\"Ghouls and Adventurers\", ghoul)\n\n//set current puzzle\nlet currentPuzzle = puzzles.get(sessionStorage.getItem('puzzleID'));\n\n//Setup Modal Controller\nlet modalController = require('./ui/modal-controller');\nmodalController.initModal(currentPuzzle.tutorialData);\n\nrunButtonVueManager.runUserCode()\n//Freeze button's height so it doesn't shrink when code is running\nconst runButton = document.getElementById(runButtonID)\nrunButton.style.height = (runButton.clientHeight + 4) + \"px\"\n//console.log(document.getElementById('vue-run-button').clientHeight)\neditor.setValue(currentPuzzle.initialCode)\n\n\n\n\n"]}